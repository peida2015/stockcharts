"use strict";
(function () {
  if (window._GraphBuilder === undefined) {
    window._GraphBuilder = {};
  };

  if (window.callbacks === undefined) {
    window.callbacks = {};
  };

  if (window.utilities === undefined) {
    window.utilities = {};
  };
  var GraphBuilder = _GraphBuilder.GraphBuilder = function (stockData, req, height, width, xPadding, yPadding) {
    req = req === undefined ? {} : req;
    height = height === undefined ? 600 : height;
    width = width === undefined ? 1000 : width;
    xPadding = xPadding === undefined ? 100 : xPadding;
    yPadding = yPadding === undefined ? 50 : yPadding;


    this.stockData = stockData; //Note: only "results" from response
    this.graphData = [];
    this.req = req;
    this.svgBody = null;
    this.height = height;
    this.width = width;
    this.xPadding = xPadding;
    this.yPadding = yPadding;
  };

  GraphBuilder.prototype = {
    setSVG: function () {
      this.svgBody = d3.select('body')
        .append('div').classed('centered', true)
        .classed('top-margin', true)
        .append('svg').attr('class', 'chart')
        .attr('height', this.height)
        .attr('width', this.width);

      this.svgBody.exit().remove();

      this.mainGraphs = this.svgBody.append('g')
        .datum(this.graphData)
        .attr('class', 'mainGraphs')
      // Remove the prompt to sign in.
      d3.select('.welcome').remove();
    },

    tradingDayConversion: function () {
      var parser = d3.timeParse("%Y-%m-%d");

      this.stockData.forEach(function (d) {
        return d.tradingDay = parser(d.tradingDay);
      });

      var startDate = this.stockData[0].tradingDay;
      var endDate = this.stockData[this.stockData.length-1].tradingDay;
    },

    convertWeeklyData: function () {
      this.weeklyData = [];
      var currWkHigh = 0;
      var currWkLow = Infinity;
      var currWkOpen;
      var currWkClose;
      var currWkVol = 0;
      var currWk = { };

      for (var i = 0; i < this.stockData.length; i++) {
        var currDay = this.stockData[i].tradingDay;

        if (i === 0 && currDay.getDay() !== 1 && currDay.getDay() !== 2) {
          // Skip first week if first week does not have complete week data
          switch (currDay.getDay()) {
            case 3:
              i += 2;
              break;
            case 4:
              i += 1;
              break;
            default:
              break;
          };
          continue;
        };

        if (currDay.getDay() === 1) {
          currWkOpen = this.stockData[i].open;
          currWk["tradingDay"] = currDay;
        };

        currWkVol += this.stockData[i].volume;

        if (this.stockData[i].high > currWkHigh) {
          currWkHigh = this.stockData[i].high;
        };

        if (this.stockData[i].low < currWkLow) {
          currWkLow = this.stockData[i].low;
        };

        // If Friday is missing, take Thursday as last day of the week. Ignore any week with more than two days missing.
        if (currDay.getDay() === 5 ||
            (currDay.getDay() === 4 && (this.stockData[i+1] === undefined || this.stockData[i+1].tradingDay.getDay() !== 5))) {
          currWkClose = this.stockData[i].close;
          currWk["symbol"] = this.stockData[i].symbol;
          currWk["open"] = currWkOpen;
          currWk["high"] = currWkHigh;
          currWk["low"] = currWkLow;
          currWk["close"] = this.stockData[i].close;
          currWk["volume"] = currWkVol;
          if (currWk["tradingDay"] === undefined) {
            if (currDay.getDay() === 5) {
              currWk["tradingDay"] = new Date(currDay-1000*60*60*24*4);
              currWk["open"] = this.stockData[i-3].open;
            } else {
              currWk["tradingDay"] = new Date(currDay-1000*60*60*24*3);
              currWk["open"] = this.stockData[i-2].open;
            };
          };
          this.weeklyData.push(currWk);
          currWkHigh = 0;
          currWkLow = Infinity;
          currWkOpen = null;
          currWkClose = null;
          currWkVol = 0;
          currWk = {};
        };
      };
    },

    dataSelector: function (startDate, endDate) {
      startDate = startDate === undefined ? null : startDate;
      endDate = endDate === undefined ? null : endDate;

      if (startDate === endDate) {
        this.graphData = this.weeklyData;
      } else {
        var data = this.getRangeData(this.stockData, startDate, endDate);
        this.graphData = data.length <= 150 || this.chartType === "line" ? data : this.getRangeData(this.weeklyData, startDate, endDate);
      };

    },

    getRangeData: function (data, startDate, endDate) {
      if (endDate === null || endDate === undefined) {
        var endIdx = data.length;
      } else {
        var endIdx = window.utilities.bsDate(data, endDate);
      };

      var startIdx = window.utilities.bsDate(data, startDate);

      return data.slice(startIdx, endIdx);
    },

    drawAxes: function () {
      var domain = [],
          range = [],
          dataCount = this.graphData.length,
          axisLength = this.width-2*this.xPadding,
          unitLength = axisLength/dataCount;

      // Use only the days in tradingDay's for a scale
      for (var i = 0; i < dataCount; i++) {
        domain.push(this.graphData[i].tradingDay);
        range.push(i*unitLength);
      };

      // Create axis from scaleTime with preset domain and range;
      this.xScale = d3.scaleTime()
        .domain(domain)
        .range(range);

      var xAxis = d3.axisBottom(this.xScale);

      // Attach the drawn x-axis to the SVG body
      var xDrawn = this.mainGraphs.append('g')
        .attr('class', 'xAxis')
        .attr('transform', 'translate('+ this.xPadding + ', '+ (this.height-3*this.yPadding)+')')
        .call(xAxis);

      // Create axis from a scale maximum and minimum stock values
      var max = -Infinity;
      var min = Infinity;

      for (var idx = 0; idx < dataCount; idx++) {
        if (this.graphData[idx].high > max) {
            max = this.graphData[idx].high;
        };
        if (this.graphData[idx].low < min) {
            min = this.graphData[idx].low;
        };
      };

      this.yScale = d3.scaleLinear()
        .domain([min, max])
        .range([this.height - 4*this.yPadding, 0]);
      var yAxis = d3.axisLeft(this.yScale);

      var yDrawn = this.mainGraphs.append('g')
        .attr('class', 'yAxis')
        .attr('transform', 'translate('+this.xPadding+', '+this.yPadding+')')
        .call(yAxis);

      // Draw grid
      d3.selectAll('.xAxis .tick').append('line')
        .attr('class', 'grid')
        .attr('x1',0.5)
        .attr('x2',0.5)
        .attr('y2', 4*this.yPadding - this.height);

      d3.selectAll('.yAxis .tick').append('line')
        .attr('class', 'grid')
        .attr('y1',0.5)
        .attr('y2',0.5)
        .attr('x2', this.width - 2*this.xPadding);

      // Attach y-axis label
      yDrawn.append('text')
        .attr('transform','rotate(-90)')
        .attr('dx', 0)
        .attr('dy', -40)
        .text('Price ($)');
    },

    drawLineGraph: function () {
      var that = this;
      var line = d3.line()
        .x(function (d) {  return that.xScale(d.tradingDay);  })
        .y(function (d) {  return that.yScale(d.close);  });

      var lineDrawn = this.mainGraphs.append('g')
        .attr('class','line');

      lineDrawn
        .append('path')
        .attr('transform', 'translate('+this.xPadding+', '+this.yPadding+')')
        .attr('d',line);

      //return lineDrawn so other elements can be attached to it.
      return lineDrawn;
    },

    drawCandlesticks: function () {
      var candlesticks = this.mainGraphs.append('g')
        .attr('class', 'candlesticks')
        .attr('transform', 'translate('+this.xPadding+', '+this.yPadding+')')
        .selectAll('.candles')
        .data(this.graphData).enter();

      var that = this;

      var sticks = candlesticks.append('line')
        .classed('sticks', true)
        .attr('x1', function (d) {
          return that.xScale(d.tradingDay);
        })
        .attr('x2', function (d) {
          return that.xScale(d.tradingDay);
        })
        .attr('y1', function (d) {
          return that.yScale(d.high);
        })
        .attr('y2', function (d) {
          return that.yScale(d.low);
        });

      var length = this.width-2*this.xPadding;
      var unitWidth = length/this.graphData.length;

      var candles = candlesticks.append('rect')
        .attr('class', function (d) {
          return d.close > d.open ? "gain" : "loss";
        })
        .attr('x', function (d) {
          var stickPos = that.xScale(d.tradingDay)
          return unitWidth > 12 ? stickPos-6 : stickPos-unitWidth/2;
        })
        .attr('y', function (d) {
          var higherPoint = d.open > d.close ? d.open : d.close;
          return that.yScale(higherPoint);
        })
        .attr('width', function(d) {
          return unitWidth > 12 ? 12 : unitWidth;
        })
        .attr('height', function (d) {
          return Math.abs(that.yScale(d.close) - that.yScale(d.open));
        });
    },

    drawPricesBox: function (line) {
      var box = line.append('g')
                .attr('class','box');
      var rect = box.append('rect');
      var high = box.append('text');
      var low = box.append('text');
      var open = box.append('text');
      var close = box.append('text');
      var volume = box.append('text');
      var tDay = box.append('text');

      var that = this;
      line.on('mouseover', that.mouseoverCallback.bind(that, box, rect, high, low, open, close, volume, tDay));
    },

    mouseoverCallback: function () {
      var eventCoor = d3.mouse(arguments[10][0]);
      var box = arguments[0];
      var rect = arguments[1];
      var high = arguments[2];
      var low = arguments[3];
      var open = arguments[4];
      var close = arguments[5];
      var volume = arguments[6];
      var tDay = arguments[7];

      var currDate = this.xScale.invert(eventCoor[0]-100);
      var currIdx = window.utilities.bsDate(this.stockData, currDate);

      var currVal = this.stockData[currIdx];

      if (currVal !== undefined) {
        rect
          .attr('x', eventCoor[0])
          .attr('y', eventCoor[1])
          .attr('width',120)
          .attr('height',80);

        high
          .attr('x', eventCoor[0] + 10)
          .attr('y', eventCoor[1] + 10)
          .text("High: "+currVal.high);

        low
          .attr('x', eventCoor[0] + 10)
          .attr('y', eventCoor[1] + 20)
          .text("Low: "+currVal.low);

        open
          .attr('x', eventCoor[0] + 10)
          .attr('y', eventCoor[1] + 30)
          .text("Open: "+currVal.open);

        close
          .attr('x', eventCoor[0] + 10)
          .attr('y', eventCoor[1] + 40)
          .text("Close: "+currVal.close);

        volume
          .attr('x', eventCoor[0] + 10)
          .attr('y', eventCoor[1] + 50)
          .text("Volume: "+currVal.volume);

        tDay
          .attr('x', eventCoor[0] + 10)
          .attr('y', eventCoor[1] + 70)
          .text(currVal.tradingDay.toDateString());

      } else {
        rect.attr('width', 0).attr('height', 0);
        open.text('');
        close.text('');
        high.text('');
        low.text('');
        volume.text('');
        tDay.text('');
      };
    },

    drawVolAxes: function () {
      var xAxis = d3.axisBottom(this.xScale);
      this.mainGraphs.append('g')
        .attr('class', 'volX')
        .attr('transform', 'translate('+this.xPadding+','+(this.height-this.yPadding)+')')
        .call(xAxis);

      var volExt = d3.extent(this.graphData, function (obj) {
        return obj.volume;
      })

      this.volYScale = d3.scaleLinear()
          .domain(volExt)
          .range([1.3*this.yPadding, 0])
          .nice();

      var yAxis = d3.axisLeft(this.volYScale)
              .tickFormat(d3.format(".2s"));

      var yDrawn = this.mainGraphs.append('g')
        .attr('class', 'volY')
        .attr('transform', 'translate('+this.xPadding+','+(this.height-2.3*this.yPadding)+')')
        .call(yAxis.ticks(2));

      var day1Day = this.graphData[0].tradingDay.getDay();
      var day2Day = this.graphData[1].tradingDay.getDay();
      var timeUnit = day1Day === day2Day ? "Wk" : "Day";
      yDrawn.append('text')
        .attr('dx', 13)
        .attr('dy', -5)
        .text('Vol('+timeUnit+')');
    },

    drawVolBars: function () {
      var stack = d3.stack().keys(["volume"])

      var barchart = d3.select('.volX').append('g')
        .attr('class', 'barchart')
        .selectAll('.volBars')
        .data(this.graphData)
        .enter();

      var that = this;

      var bars = barchart
        .append('line')
        .attr('y2', function (d) {
          return that.volYScale(d.volume)-1.3*that.yPadding;
        })
        .attr('x1', function (d) {
          return that.xScale(d.tradingDay);
        })
        .attr('x2', function (d) {
          return that.xScale(d.tradingDay);
        });

      bars.on('mouseover', function (d) {
        d3.select('.volText').remove();

        d3.select('.volX').append('text')
          .classed('volText', true)
          .text("Vol: " + d3.format('.3s')(d.volume))
          .attr('x', d3.select(this).attr('x1'))
          .attr('y', -1.3*that.yPadding);
      })

      barchart.exit().remove();
    },

    drawSymbol: function () {
      var that = this;

      var symb = this.mainGraphs.append('g')
        .attr('transform', 'translate('+that.width/2+','+that.yPadding/2+')')
        .attr('class', 'symbol');

      symb.append('text')
        .text(function (d) {
          return d[0].symbol;
        })
        .on('mouseover', fadeInText);

      var bgColor = symb.insert('rect', ":first-child")
        .attr('x', 0)
        .attr('y', -symb.select('text').node().getBBox().height+5)
        .attr('width', symb.select('text').node().getBBox().width)
        .attr('height', symb.select('text').node().getBBox().height);

      symb.on("click touchstart", function (d) {
          bgColor.classed("focused", true);

          var pressCounter = 0;

          d3.select(document).on("keyup", function () {
            pressCounter++;
            var symEl = d3.select('.symbol text');
            if (pressCounter == 1) { symEl.text(" "); }
            if (d3.event.key.match(/^[\w.]$/)) {
              symEl.text((symEl.text()+d3.event.key).trimLeft());
              bgColor.attr('width', symEl.node().getBBox().width);
            } else if (d3.event.key === "Backspace") {
              symEl.text(symEl.text().slice(0, -1));
              bgColor.attr('width', symEl.node().getBBox().width|10);
            } else if (d3.event.key === "Enter") {
              that.dataRequest(symEl.text().toUpperCase().trim());
            };
          });

          d3.select('.symbol image').on('click', function () {
            var symEl = d3.select('.symbol text');
            if (symEl.text().length !== 0) {
              that.dataRequest(symEl.text().toUpperCase().trim());
            };
          });
        });

      // Percent change
      var data = that.graphData;
      var change = (data[data.length-1].close - data[0].open)/data[0].open;

      symb.append('text').attr('class', change >= 0 ? 'pos' : 'neg')
        .attr('x', 70).text(d3.format("+.2%")(change));

      symb.append('image').attr('class', "searchIcon").attr('x', -25)
        .attr('y', -symb.select('text').node().getBBox().height+5)
        .attr('height', '20')
        .attr('width', '20')
        .attr('xlink:href', "<%= image_url('search.jpg') %>");

      // Fade in animation for hint text.
      var fadeInText = function () {
        d3.select('text.teach').transition().duration(3000)
        .style("opacity", 1)
        .delay(1000)
        .transition().duration(1000)
        .style("opacity", 0);
      };

      // Hint text
      symb.append('text').attr('class', 'teach')
        .text('Click. Type SYMBOL when yellow. Hit ENTER.')
        .attr('y', 30);

      // Initial animation.
      fadeInText();

    },

    drawTimeline: function () {
      var startDate = this.stockData[0].tradingDay;
      var endDate = this.stockData[this.stockData.length-1].tradingDay;

      // Create axis from scaleTime with preset domain and range;
      var xScale = d3.scaleTime()
        .domain([startDate, endDate])
        .range([0, this.width - 2*this.xPadding]);

      var xAxis = d3.axisBottom(xScale);

      var timeline = this.svgBody.append('g')
        .attr('class', 'timeline')
        .attr('transform', 'translate('+ this.xPadding+', '+(this.height-20)+')')

      var timelineArea = timeline.append('rect')
      .attr('class', 'timelineArea')
      .attr('width', this.width-2*this.xPadding)
      .attr('height', 20);

      var rangeRect = timeline.append('rect')
      .attr('class', 'timeRange')
      .attr('width', this.width-2*this.xPadding)
      .attr('height', 20);

      timeline.call(xAxis);

      var leftHandle = timeline.append('rect')
        .attr('class', 'handle')
        .attr('width', 8)
        .attr('height', 12)
        .attr('rx', 3)
        .attr('ry', 3)
        .attr('y', 4)
        .attr('x', -4);

      var rightHandle = timeline.append('rect')
        .attr('class', 'handle')
        .attr('width', 8)
        .attr('height', 12)
        .attr('rx', 3)
        .attr('ry', 3)
        .attr('y', 4)
        .attr('x', this.width-2*this.xPadding-4);

      var dragHandler = function () {
        var el = d3.select(this);
        var rangeRect = d3.select('rect.timeRange');
        var initPos = parseInt(el.attr('x'));
        var displacement = d3.event.dx;
        // Get initWidth from the background opaque rectangle 'timelineArea'.
        var initWidth = timelineArea.attr('width');

        if ($('rect.handle').last().attr('x') === el.attr('x')) {
          var otherHandlePos = $('rect.handle').first().attr('x')
        } else {
          var otherHandlePos = $('rect.handle').last().attr('x');
        };
        otherHandlePos = parseInt(otherHandlePos);

        // Enforce bounds
        var newPos = (displacement + initPos) >= -4 ? (displacement + initPos) : -4;
        newPos = newPos <= initWidth-4 ? newPos : initWidth-4;

        el.attr('x', newPos);

        // Set rangeRect's position and width based on the new handle positions
        if (newPos > otherHandlePos) {
          rangeRect.attr('x', otherHandlePos+4);
          rangeRect.attr('width', newPos-otherHandlePos);
        } else {
          rangeRect.attr('x', newPos+4);
          rangeRect.attr('width', otherHandlePos-newPos);
        };

        if (d3.event.type === "end") {
          dragEnd();
        };
      };

      var dragEnd = function () {
        var xScale = arguments[0];
        var rangeRect = $('rect.timeRange');
        var leftEnd = parseInt(rangeRect.attr('x'));
        var length = parseInt(rangeRect.attr('width'));
        var startDate = xScale.invert(leftEnd);
        var endDate = xScale.invert(leftEnd + length);
        this.dataSelector(startDate, endDate);
        this.updateChart();
      }.bind(this, xScale);

      // Put a drag listener on both handles.
      d3.selectAll('rect.handle').call(d3.drag().on("drag end", dragHandler, dragEnd));

      var dragRangeRect = function () {
        var displacement = d3.event.dx;
        var newPos = parseInt(d3.select(this).attr('x'))+displacement;
        var length = parseInt(d3.select(this).attr('width'));
        // Get initWidth from the background opaque rectangle.
        var initWidth = timelineArea.attr('width');

        // Enforce bounds
        if (newPos>= 0 && newPos+length <= initWidth) {

          var handle1 = $('rect.handle').first();
          var handle2 = $('rect.handle').last();

          handle1.attr('x', parseInt(handle1.attr('x'))+displacement);
          handle2.attr('x', parseInt(handle2.attr('x'))+displacement);

          d3.select(this).attr('x', newPos);
          dragEnd();
        };
      };

      rangeRect.call(d3.drag().on("drag", dragRangeRect));
    },

    drawChartTypeSelector: function () {
      var chartIcons = this.svgBody.append('g').attr('class', 'chartIcons');

      var lineIcon = chartIcons.append('image')
        .attr('class', 'lg-icon')
        .attr('x', '5')
        .attr('y', '0')
        .attr('height', '35')
        .attr('width', '35')
        .attr('xlink:href', "<%= image_url('lg-icon.png') %>");

      var candlestickIcon = chartIcons.append('image')
        .attr('class', 'cs-icon')
        .attr('x', '50')
        .attr('y', '0')
        .attr('height', '35')
        .attr('width', '35')
        .attr('xlink:href', "<%= image_url('cs-icon.png') %>");

      var that = this;

      var clickHandler = function () {
        var el = d3.select(this);
        if (!el.classed('selected')) {
          d3.select('rect.icon-bg.selected').classed('selected', false);
          el.classed('selected', true);

          parseInt(el.attr('x')) === 5 ? that.chartType = "line" : that.chartType = "candlesticks";

          that.updateChart();
        };
      };

      var lineIconBg = chartIcons.append('rect')
        .classed('icon-bg', true)
        .attr('x', '5')
        .attr('y', '0')
        .attr('height', '35')
        .attr('width', '35')
        .on('click', clickHandler);

      var csIconBg = chartIcons.append('rect')
        .classed('icon-bg', true)
        .classed('selected', true)
        .attr('x', 50)
        .attr('y', 0)
        .attr('height', 35)
        .attr('width', 35)
        .on('click', clickHandler);

    },

    dataRequest: function (symbol) {
      if (firebase.auth().currentUser) {
        //Remove keyup listener
        d3.select(document).on("keyup", null);
        d3.selectAll('.focused').classed('focused', false);

        $('#spinner').modal();

        window.callbacks.xhrReq(this.req.id_token, symbol);
        console.log("dataRequest "+symbol);
      } else {
        var flashText = $('<div>').text('Sign in to lookup another symbol').addClass('flash').addClass('centered').prependTo('body').fadeIn(2000).delay(2000).fadeOut();

        var remov = function () {
          flashText.remove();
        };
        // Wait until flash text finished fading effects before removal.
        setTimeout(remov, 4000);
      };
    },

    createChart: function () {
      this.drawAxes();
      if (this.chartType === "candlesticks") {
        this.drawCandlesticks();
      } else {
        var line = this.drawLineGraph();
        this.drawPricesBox(line);
      };
      this.drawVolAxes();
      this.drawVolBars();
      this.drawSymbol();
    },

    updateChart: function () {
      var newTime = new Date();

      // Update chart only if it has never been updated before or it's been 200ms since last update
      if (this.lastUpdate === undefined || (newTime-this.lastUpdate > 200)) {
        this.lastUpdate = newTime;

        this.mainGraphs.remove();
        this.mainGraphs = this.svgBody.append('g').attr('class', 'mainGraphs')
        .datum(this.graphData)

        this.createChart();
      };
    },

    updateData: function (stockData, req) {
      this.svgBody.remove();
      this.req = req;
      this.dataPreparation(stockData);
      this.drawSVG();
    },

    dataPreparation: function (stockData) {
      this.stockData = stockData;
      this.tradingDayConversion();
      this.convertWeeklyData();
      this.dataSelector();
    },

    drawSVG: function () {
      this.setSVG();
      this.createChart();
      this.drawTimeline();
      this.drawChartTypeSelector();
    }

  };

  var buildGraph = callbacks.buildGraph = function (data) {
    $('#spinner').modal('hide');

    if (data.status.code === 200) {
      var graph = window._GraphBuilder.singleGraphInstance;
      var ctrlPanel = window._GraphBuilder.singleCtrlInstance;

      if (graph === undefined) {
        graph = window._GraphBuilder.singleGraphInstance = new window._GraphBuilder.GraphBuilder(data.results, data.request, 600, $('body').width());
        ctrlPanel = window._GraphBuilder.singleCtrlInstance = new window._GraphBuilder.CtrlBuilder(graph);
        ctrlPanel.chartTypeSelectorButtons();
        graph.chartType = "candlesticks";
        graph.dataPreparation(data.results);
        graph.drawSVG();
      } else {
        graph.updateData(data.results, data.request);
      };
    };

  };

  window.utilities.bsDate = function (data, date) {
      // A number is returned for any date input.
      if (data.length <= 1) { return 0;  };

      var oneDay = 1000*60*60*24;

      var midIdx = Math.floor(data.length/2);

      var timeDiff = data[midIdx].tradingDay - date;

      // There is no exact Datetime match, match tolerance is oneDay.
      if (Math.abs(timeDiff) < oneDay) { return midIdx; };

      if (timeDiff > 0) {
        return window.utilities.bsDate(data.slice(0, midIdx), date);
      } else {
        return midIdx + window.utilities.bsDate(data.slice(midIdx, data.length), date);
      };

    };

})();
